/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type TokenIdStruct = { domain: BigNumberish; id: BytesLike };

export type TokenIdStructOutput = [domain: bigint, id: string] & {
  domain: bigint;
  id: string;
};

export type TransferInfoStruct = {
  originDomain: BigNumberish;
  destinationDomain: BigNumberish;
  canonicalDomain: BigNumberish;
  to: AddressLike;
  delegate: AddressLike;
  receiveLocal: boolean;
  callData: BytesLike;
  slippage: BigNumberish;
  originSender: AddressLike;
  bridgedAmt: BigNumberish;
  normalizedIn: BigNumberish;
  nonce: BigNumberish;
  canonicalId: BytesLike;
};

export type TransferInfoStructOutput = [
  originDomain: bigint,
  destinationDomain: bigint,
  canonicalDomain: bigint,
  to: string,
  delegate: string,
  receiveLocal: boolean,
  callData: string,
  slippage: bigint,
  originSender: string,
  bridgedAmt: bigint,
  normalizedIn: bigint,
  nonce: bigint,
  canonicalId: string
] & {
  originDomain: bigint;
  destinationDomain: bigint;
  canonicalDomain: bigint;
  to: string;
  delegate: string;
  receiveLocal: boolean;
  callData: string;
  slippage: bigint;
  originSender: string;
  bridgedAmt: bigint;
  normalizedIn: bigint;
  nonce: bigint;
  canonicalId: string;
};

export type ExecuteArgsStruct = {
  params: TransferInfoStruct;
  routers: AddressLike[];
  routerSignatures: BytesLike[];
  sequencer: AddressLike;
  sequencerSignature: BytesLike;
};

export type ExecuteArgsStructOutput = [
  params: TransferInfoStructOutput,
  routers: string[],
  routerSignatures: string[],
  sequencer: string,
  sequencerSignature: string
] & {
  params: TransferInfoStructOutput;
  routers: string[];
  routerSignatures: string[];
  sequencer: string;
  sequencerSignature: string;
};

export interface IConnextInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LIQUIDITY_FEE_DENOMINATOR"
      | "LIQUIDITY_FEE_NUMERATOR"
      | "acceptProposedRouterOwner"
      | "addRouterLiquidity"
      | "addRouterLiquidityFor"
      | "adoptedToCanonical"
      | "approvedAssets"
      | "approvedSequencers"
      | "bumpTransfer"
      | "domain"
      | "execute"
      | "forceReceiveLocal"
      | "forceUpdateSlippage"
      | "getProposedRouterOwner"
      | "getProposedRouterOwnerTimestamp"
      | "getRouterApproval"
      | "getRouterApprovalForPortal"
      | "getRouterOwner"
      | "getRouterRecipient"
      | "initializeRouter"
      | "maxRoutersPerTransfer"
      | "nonce"
      | "proposeRouterOwner"
      | "remote"
      | "removeRouterLiquidity"
      | "removeRouterLiquidityFor"
      | "routedTransfers"
      | "routerBalances"
      | "setRouterRecipient"
      | "transferStatus"
      | "xAppConnectionManager"
      | "xcall(uint32,address,address,address,uint256,uint256,bytes)"
      | "xcall(uint32,address,address,address,uint256,uint256,bytes,uint256)"
      | "xcallIntoLocal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LIQUIDITY_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDITY_FEE_NUMERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptProposedRouterOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addRouterLiquidity",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addRouterLiquidityFor",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adoptedToCanonical",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedAssets",
    values: [TokenIdStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedSequencers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bumpTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [ExecuteArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "forceReceiveLocal",
    values: [TransferInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "forceUpdateSlippage",
    values: [TransferInfoStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedRouterOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedRouterOwnerTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterApproval",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterApprovalForPortal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRouterRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeRouter",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRoutersPerTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeRouterOwner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterLiquidity",
    values: [TokenIdStruct, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouterLiquidityFor",
    values: [TokenIdStruct, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "routedTransfers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "routerBalances",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterRecipient",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xAppConnectionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "xcall(uint32,address,address,address,uint256,uint256,bytes)",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xcall(uint32,address,address,address,uint256,uint256,bytes,uint256)",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "xcallIntoLocal",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "LIQUIDITY_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDITY_FEE_NUMERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRouterLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRouterLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adoptedToCanonical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedSequencers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bumpTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceReceiveLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceUpdateSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedRouterOwnerTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterApprovalForPortal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRouterRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRoutersPerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouterLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xAppConnectionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xcall(uint32,address,address,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xcall(uint32,address,address,address,uint256,uint256,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "xcallIntoLocal",
    data: BytesLike
  ): Result;
}

export interface IConnext extends BaseContract {
  connect(runner?: ContractRunner | null): IConnext;
  waitForDeployment(): Promise<this>;

  interface: IConnextInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LIQUIDITY_FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  LIQUIDITY_FEE_NUMERATOR: TypedContractMethod<[], [bigint], "view">;

  acceptProposedRouterOwner: TypedContractMethod<
    [_router: AddressLike],
    [void],
    "nonpayable"
  >;

  addRouterLiquidity: TypedContractMethod<
    [_amount: BigNumberish, _local: AddressLike],
    [void],
    "payable"
  >;

  addRouterLiquidityFor: TypedContractMethod<
    [_amount: BigNumberish, _local: AddressLike, _router: AddressLike],
    [void],
    "payable"
  >;

  adoptedToCanonical: TypedContractMethod<
    [_adopted: AddressLike],
    [TokenIdStructOutput],
    "view"
  >;

  approvedAssets: TypedContractMethod<
    [_canonical: TokenIdStruct],
    [boolean],
    "view"
  >;

  approvedSequencers: TypedContractMethod<
    [_sequencer: AddressLike],
    [boolean],
    "view"
  >;

  bumpTransfer: TypedContractMethod<
    [_transferId: BytesLike],
    [void],
    "payable"
  >;

  domain: TypedContractMethod<[], [bigint], "view">;

  execute: TypedContractMethod<
    [_args: ExecuteArgsStruct],
    [string],
    "nonpayable"
  >;

  forceReceiveLocal: TypedContractMethod<
    [_params: TransferInfoStruct],
    [void],
    "nonpayable"
  >;

  forceUpdateSlippage: TypedContractMethod<
    [_params: TransferInfoStruct, _slippage: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProposedRouterOwner: TypedContractMethod<
    [_router: AddressLike],
    [string],
    "view"
  >;

  getProposedRouterOwnerTimestamp: TypedContractMethod<
    [_router: AddressLike],
    [bigint],
    "view"
  >;

  getRouterApproval: TypedContractMethod<
    [_router: AddressLike],
    [boolean],
    "view"
  >;

  getRouterApprovalForPortal: TypedContractMethod<
    [_router: AddressLike],
    [boolean],
    "view"
  >;

  getRouterOwner: TypedContractMethod<[_router: AddressLike], [string], "view">;

  getRouterRecipient: TypedContractMethod<
    [_router: AddressLike],
    [string],
    "view"
  >;

  initializeRouter: TypedContractMethod<
    [_owner: AddressLike, _recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  maxRoutersPerTransfer: TypedContractMethod<[], [bigint], "view">;

  nonce: TypedContractMethod<[], [bigint], "view">;

  proposeRouterOwner: TypedContractMethod<
    [_router: AddressLike, _proposed: AddressLike],
    [void],
    "nonpayable"
  >;

  remote: TypedContractMethod<[_domain: BigNumberish], [string], "view">;

  removeRouterLiquidity: TypedContractMethod<
    [_canonical: TokenIdStruct, _amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  removeRouterLiquidityFor: TypedContractMethod<
    [
      _canonical: TokenIdStruct,
      _amount: BigNumberish,
      _to: AddressLike,
      _router: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  routedTransfers: TypedContractMethod<
    [_transferId: BytesLike],
    [string[]],
    "view"
  >;

  routerBalances: TypedContractMethod<
    [_router: AddressLike, _asset: AddressLike],
    [bigint],
    "view"
  >;

  setRouterRecipient: TypedContractMethod<
    [_router: AddressLike, _recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  transferStatus: TypedContractMethod<
    [_transferId: BytesLike],
    [bigint],
    "view"
  >;

  xAppConnectionManager: TypedContractMethod<[], [string], "view">;

  "xcall(uint32,address,address,address,uint256,uint256,bytes)": TypedContractMethod<
    [
      _destination: BigNumberish,
      _to: AddressLike,
      _asset: AddressLike,
      _delegate: AddressLike,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike
    ],
    [string],
    "payable"
  >;

  "xcall(uint32,address,address,address,uint256,uint256,bytes,uint256)": TypedContractMethod<
    [
      _destination: BigNumberish,
      _to: AddressLike,
      _asset: AddressLike,
      _delegate: AddressLike,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      _relayerFee: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  xcallIntoLocal: TypedContractMethod<
    [
      _destination: BigNumberish,
      _to: AddressLike,
      _asset: AddressLike,
      _delegate: AddressLike,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike
    ],
    [string],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LIQUIDITY_FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LIQUIDITY_FEE_NUMERATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptProposedRouterOwner"
  ): TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addRouterLiquidity"
  ): TypedContractMethod<
    [_amount: BigNumberish, _local: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "addRouterLiquidityFor"
  ): TypedContractMethod<
    [_amount: BigNumberish, _local: AddressLike, _router: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "adoptedToCanonical"
  ): TypedContractMethod<
    [_adopted: AddressLike],
    [TokenIdStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "approvedAssets"
  ): TypedContractMethod<[_canonical: TokenIdStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "approvedSequencers"
  ): TypedContractMethod<[_sequencer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bumpTransfer"
  ): TypedContractMethod<[_transferId: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "domain"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[_args: ExecuteArgsStruct], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "forceReceiveLocal"
  ): TypedContractMethod<[_params: TransferInfoStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "forceUpdateSlippage"
  ): TypedContractMethod<
    [_params: TransferInfoStruct, _slippage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProposedRouterOwner"
  ): TypedContractMethod<[_router: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getProposedRouterOwnerTimestamp"
  ): TypedContractMethod<[_router: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRouterApproval"
  ): TypedContractMethod<[_router: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRouterApprovalForPortal"
  ): TypedContractMethod<[_router: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRouterOwner"
  ): TypedContractMethod<[_router: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRouterRecipient"
  ): TypedContractMethod<[_router: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initializeRouter"
  ): TypedContractMethod<
    [_owner: AddressLike, _recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxRoutersPerTransfer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposeRouterOwner"
  ): TypedContractMethod<
    [_router: AddressLike, _proposed: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remote"
  ): TypedContractMethod<[_domain: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeRouterLiquidity"
  ): TypedContractMethod<
    [_canonical: TokenIdStruct, _amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeRouterLiquidityFor"
  ): TypedContractMethod<
    [
      _canonical: TokenIdStruct,
      _amount: BigNumberish,
      _to: AddressLike,
      _router: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "routedTransfers"
  ): TypedContractMethod<[_transferId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "routerBalances"
  ): TypedContractMethod<
    [_router: AddressLike, _asset: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setRouterRecipient"
  ): TypedContractMethod<
    [_router: AddressLike, _recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferStatus"
  ): TypedContractMethod<[_transferId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "xAppConnectionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "xcall(uint32,address,address,address,uint256,uint256,bytes)"
  ): TypedContractMethod<
    [
      _destination: BigNumberish,
      _to: AddressLike,
      _asset: AddressLike,
      _delegate: AddressLike,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "xcall(uint32,address,address,address,uint256,uint256,bytes,uint256)"
  ): TypedContractMethod<
    [
      _destination: BigNumberish,
      _to: AddressLike,
      _asset: AddressLike,
      _delegate: AddressLike,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike,
      _relayerFee: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "xcallIntoLocal"
  ): TypedContractMethod<
    [
      _destination: BigNumberish,
      _to: AddressLike,
      _asset: AddressLike,
      _delegate: AddressLike,
      _amount: BigNumberish,
      _slippage: BigNumberish,
      _callData: BytesLike
    ],
    [string],
    "payable"
  >;

  filters: {};
}
