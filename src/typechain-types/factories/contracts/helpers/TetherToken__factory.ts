/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TetherToken,
  TetherTokenInterface,
} from "../../../contracts/helpers/TetherToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialBalance",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608034620003b1576001600160401b0390601f601f1962000a52388190038381018316850186811186821017620003b657859282916040528339602094859181010312620003b157519362000053620003cc565b600b81526a2a32ba3432b92a37b5b2b760a91b8582015262000074620003cc565b90600494858352631554d11560e21b87840152815192848411620002b5576003938454936001948581811c91168015620003a6575b8b82101462000391579081858493116200033b575b508a90858311600114620002d657600092620002ca575b505060001982871b1c191690841b1784555b8051948511620002b55786548381811c91168015620002aa575b8982101462000295578281116200024a575b5087918511600114620001e15784955090849291600095620001d5575b50501b92600019911b1c19161781555b3315620001bd5760025490838201809211620001a857506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91600255338352828152604083208481540190556040519384523393a36040516106659081620003ed8239f35b601190634e487b7160e01b6000525260246000fd5b60249060006040519163ec442f0560e01b8352820152fd5b01519350388062000130565b9291948416928660005284886000209460005b8a8983831062000232575050501062000217575b50505050811b01815562000140565b01519060f884600019921b161c191690553880808062000208565b868601518955909701969485019488935001620001f4565b87600052886000208380880160051c8201928b89106200028b575b0160051c019084905b8281106200027e57505062000113565b600081550184906200026e565b9250819262000265565b602288634e487b7160e01b6000525260246000fd5b90607f169062000101565b604187634e487b7160e01b6000525260246000fd5b015190503880620000d5565b908987941691886000528c600020928d6000905b8282106200032357505084116200030a575b505050811b018455620000e7565b015160001983891b60f8161c19169055388080620002fc565b8385015186558a979095019493840193018e620002ea565b909150866000528a6000208580850160051c8201928d861062000387575b918891869594930160051c01915b82811062000377575050620000be565b6000815585945088910162000367565b9250819262000359565b60228a634e487b7160e01b6000525260246000fd5b90607f1690620000a9565b600080fd5b634e487b7160e01b600052604160045260246000fd5b60408051919082016001600160401b03811183821017620003b65760405256fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461041c57508163095ea7b31461036e57816318160ddd1461034f57816323b872dd14610258578163313ce5671461023c57816370a082311461020557816395d89b411461010357508063a9059cbb146100d35763dd62ed3e1461008857600080fd5b346100cf57806003193601126100cf57806020926100a4610520565b6100ac61053b565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100cf57806003193601126100cf576020906100fc6100f2610520565b6024359033610551565b5160018152f35b8383346100cf57816003193601126100cf57805190828454600181811c908083169283156101fb575b60209384841081146101e8578388529081156101cc5750600114610194575b505050829003601f01601f191682019267ffffffffffffffff841183851017610181575082918261017d9252826104d7565b0390f35b634e487b7160e01b815260418552602490fd5b919250868652828620918387935b8385106101b8575050505083010185808061014b565b8054888601830152930192849082016101a2565b60ff1916878501525050151560051b840101905085808061014b565b634e487b7160e01b895260228a52602489fd5b91607f169161012c565b5050346100cf5760203660031901126100cf5760209181906001600160a01b0361022d610520565b16815280845220549051908152f35b5050346100cf57816003193601126100cf576020905160128152f35b9050823461034c57606036600319011261034c57610274610520565b61027c61053b565b916044359360018060a01b0383168083526001602052868320338452602052868320549160001983036102b8575b6020886100fc898989610551565b8683106103205781156103095733156102f2575082526001602090815286832033845281529186902090859003905582906100fc876102aa565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b80fd5b5050346100cf57816003193601126100cf576020906002549051908152f35b905034610418578160031936011261041857610388610520565b602435903315610401576001600160a01b03169182156103ea57508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b8280fd5b8490843461041857826003193601126104185782600354600181811c908083169283156104cd575b60209384841081146101e8578388529081156101cc575060011461049457505050829003601f01601f191682019267ffffffffffffffff841183851017610181575082918261017d9252826104d7565b91925060038652828620918387935b8385106104b9575050505083010185808061014b565b8054888601830152930192849082016104a3565b91607f1691610444565b6020808252825181830181905290939260005b82811061050c57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016104ea565b600435906001600160a01b038216820361053657565b600080fd5b602435906001600160a01b038216820361053657565b916001600160a01b0380841692831561061657169283156105fd57600090838252816020526040822054908382106105cb575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fdfea2646970667358221220c7b54acd6b3ed7f40c609d85d96940cb7d549e129b68feabaeb63bcf00b2ad3164736f6c63430008140033";

type TetherTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TetherTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TetherToken__factory extends ContractFactory {
  constructor(...args: TetherTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialBalance: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialBalance, overrides || {});
  }
  override deploy(
    initialBalance: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialBalance, overrides || {}) as Promise<
      TetherToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TetherToken__factory {
    return super.connect(runner) as TetherToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TetherTokenInterface {
    return new Interface(_abi) as TetherTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TetherToken {
    return new Contract(address, _abi, runner) as unknown as TetherToken;
  }
}
